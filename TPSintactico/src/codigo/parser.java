
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\003\005\000\002\003\004\000\002\005\003" +
    "\000\002\005\004\000\002\004\007\000\002\006\007\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\012\006\000\002\013\003\000\002" +
    "\013\003\000\002\021\005\000\002\021\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\003\000\002\024\004" +
    "\000\002\024\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\025\011\000\002\025\013" +
    "\000\002\026\011\000\002\030\012\000\002\030\004\000" +
    "\002\032\004\000\002\032\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\003\006\026\010\001\002\000\004\002" +
    "\210\001\002\000\004\002\000\001\002\000\004\027\207" +
    "\001\002\000\006\003\035\036\037\001\002\000\004\015" +
    "\012\001\002\000\006\015\012\027\ufffc\001\002\000\004" +
    "\004\015\001\002\000\004\027\014\001\002\000\006\003" +
    "\ufffe\036\ufffe\001\002\000\006\014\016\016\017\001\002" +
    "\000\004\004\030\001\002\000\004\005\026\001\002\000" +
    "\010\044\022\045\024\046\023\001\002\000\004\016\025" +
    "\001\002\000\006\014\ufff7\016\ufff7\001\002\000\006\014" +
    "\ufff6\016\ufff6\001\002\000\006\014\ufff5\016\ufff5\001\002" +
    "\000\006\015\ufffa\027\ufffa\001\002\000\004\015\027\001" +
    "\002\000\010\044\ufff8\045\ufff8\046\ufff8\001\002\000\006" +
    "\014\016\016\017\001\002\000\010\044\022\045\024\046" +
    "\023\001\002\000\004\014\033\001\002\000\010\044\ufff9" +
    "\045\ufff9\046\ufff9\001\002\000\004\027\ufffb\001\002\000" +
    "\016\003\047\004\046\032\051\035\041\037\206\040\044" +
    "\001\002\000\004\002\uffff\001\002\000\014\003\047\004" +
    "\046\032\051\035\041\040\044\001\002\000\024\002\uffec" +
    "\004\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040" +
    "\uffec\041\uffec\001\002\000\012\004\176\043\201\047\177" +
    "\050\200\001\002\000\014\004\046\032\051\035\041\037" +
    "\175\040\044\001\002\000\024\002\uffeb\004\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\001" +
    "\002\000\004\006\167\001\002\000\024\002\uffee\004\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041" +
    "\uffee\001\002\000\004\005\162\001\002\000\012\004\046" +
    "\032\051\035\041\040\044\001\002\000\024\002\uffef\004" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\040\uffef" +
    "\041\uffef\001\002\000\004\006\053\001\002\000\024\002" +
    "\uffed\004\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed" +
    "\040\uffed\041\uffed\001\002\000\020\003\065\004\062\006" +
    "\061\042\067\043\063\047\055\050\056\001\002\000\036" +
    "\007\uffc7\010\uffc7\011\uffc7\012\144\013\143\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7" +
    "\031\uffc7\001\002\000\016\020\130\021\124\022\123\023" +
    "\122\024\133\025\131\001\002\000\036\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2\001\002" +
    "\000\010\007\uffe3\030\152\031\153\001\002\000\022\010" +
    "\137\011\141\020\130\021\124\022\123\023\122\024\133" +
    "\025\131\001\002\000\016\003\134\004\062\006\061\042" +
    "\067\043\063\050\056\001\002\000\036\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\030\uffc1\031\uffc1\001\002" +
    "\000\036\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\030\uffc3\031\uffc3\001\002\000\036\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\024\007\127\020\130\021\124\022\123\023\122\024\133" +
    "\025\131\030\132\031\125\001\002\000\036\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf\031\uffbf\001" +
    "\002\000\004\006\102\001\002\000\004\007\071\001\002" +
    "\000\014\003\047\004\046\032\051\035\041\040\044\001" +
    "\002\000\016\004\046\032\051\033\075\034\073\035\041" +
    "\040\044\001\002\000\004\017\101\001\002\000\024\002" +
    "\ufff1\004\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\014\003\047\004\046\032" +
    "\051\035\041\040\044\001\002\000\014\004\046\032\051" +
    "\034\077\035\041\040\044\001\002\000\004\017\100\001" +
    "\002\000\024\002\uffd5\004\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\024\002" +
    "\uffd6\004\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\004\004\103\001\002\000" +
    "\004\017\104\001\002\000\004\023\105\001\002\000\004" +
    "\017\106\001\002\000\004\015\107\001\002\000\010\003" +
    "\113\016\112\043\114\001\002\000\004\007\111\001\002" +
    "\000\036\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\030\uffd3\031\uffd3\001\002\000\004\007\uffd1\001\002\000" +
    "\004\014\121\001\002\000\006\014\uffcd\016\uffcd\001\002" +
    "\000\006\014\116\016\117\001\002\000\004\043\120\001" +
    "\002\000\004\007\uffd0\001\002\000\006\014\uffcf\016\uffcf" +
    "\001\002\000\006\014\uffce\016\uffce\001\002\000\026\003" +
    "\uffd8\004\uffd8\006\uffd8\007\uffd8\030\uffd8\031\uffd8\042\uffd8" +
    "\043\uffd8\047\uffd8\050\uffd8\001\002\000\026\003\uffd7\004" +
    "\uffd7\006\uffd7\007\uffd7\030\uffd7\031\uffd7\042\uffd7\043\uffd7" +
    "\047\uffd7\050\uffd7\001\002\000\026\003\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\030\uffdb\031\uffdb\042\uffdb\043\uffdb\047\uffdb" +
    "\050\uffdb\001\002\000\004\007\uffe2\001\002\000\010\007" +
    "\uffdd\030\uffdd\031\uffdd\001\002\000\036\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2\001\002" +
    "\000\026\003\uffdc\004\uffdc\006\uffdc\007\uffdc\030\uffdc\031" +
    "\uffdc\042\uffdc\043\uffdc\047\uffdc\050\uffdc\001\002\000\026" +
    "\003\uffda\004\uffda\006\uffda\007\uffda\030\uffda\031\uffda\042" +
    "\uffda\043\uffda\047\uffda\050\uffda\001\002\000\004\007\uffe1" +
    "\001\002\000\026\003\uffd9\004\uffd9\006\uffd9\007\uffd9\030" +
    "\uffd9\031\uffd9\042\uffd9\043\uffd9\047\uffd9\050\uffd9\001\002" +
    "\000\004\007\127\001\002\000\004\007\136\001\002\000" +
    "\036\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030" +
    "\uffc0\031\uffc0\001\002\000\016\003\134\004\062\006\061" +
    "\042\067\043\063\050\056\001\002\000\020\003\134\004" +
    "\062\006\061\042\067\043\063\047\147\050\056\001\002" +
    "\000\016\003\134\004\062\006\061\042\067\043\063\050" +
    "\056\001\002\000\036\007\uffc8\010\uffc8\011\uffc8\012\144" +
    "\013\143\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\030\uffc8\031\uffc8\001\002\000\016\003\134" +
    "\004\062\006\061\042\067\043\063\050\056\001\002\000" +
    "\016\003\134\004\062\006\061\042\067\043\063\050\056" +
    "\001\002\000\036\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\031\uffc5\001\002\000\036\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6\001" +
    "\002\000\010\007\uffdf\030\uffdf\031\uffdf\001\002\000\014" +
    "\007\uffe0\010\137\011\141\030\uffe0\031\uffe0\001\002\000" +
    "\036\007\uffc9\010\uffc9\011\uffc9\012\144\013\143\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\030" +
    "\uffc9\031\uffc9\001\002\000\020\003\155\004\062\006\061" +
    "\042\067\043\063\047\055\050\056\001\002\000\020\003" +
    "\155\004\062\006\061\042\067\043\063\047\055\050\056" +
    "\001\002\000\004\007\uffe4\001\002\000\020\007\127\020" +
    "\130\021\124\022\123\023\122\024\133\025\131\001\002" +
    "\000\004\007\uffe5\001\002\000\016\003\134\004\062\006" +
    "\061\042\067\043\063\050\056\001\002\000\014\007\uffde" +
    "\010\137\011\141\030\uffde\031\uffde\001\002\000\024\002" +
    "\ufff0\004\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\020\003\134\004\062\006" +
    "\061\042\067\043\063\047\164\050\056\001\002\000\004" +
    "\017\166\001\002\000\004\017\uffe9\001\002\000\010\010" +
    "\137\011\141\017\uffe8\001\002\000\024\002\uffea\004\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040\uffea\041" +
    "\uffea\001\002\000\020\003\065\004\062\006\061\042\067" +
    "\043\063\047\055\050\056\001\002\000\004\007\171\001" +
    "\002\000\014\003\047\004\046\032\051\035\041\040\044" +
    "\001\002\000\014\004\046\032\051\035\041\040\044\041" +
    "\173\001\002\000\004\017\174\001\002\000\024\002\uffd4" +
    "\004\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\001\002\000\004\002\ufff4\001\002\000\004" +
    "\017\204\001\002\000\004\017\uffcb\001\002\000\004\017" +
    "\uffca\001\002\000\004\017\uffcc\001\002\000\004\017\203" +
    "\001\002\000\024\002\uffe7\004\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002\000\024" +
    "\002\uffe6\004\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\014\002\ufff3\004\046" +
    "\032\051\035\041\040\044\001\002\000\004\002\ufff2\001" +
    "\002\000\006\003\ufffd\036\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\003\003\006\011\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\035\001\001\000\006\004\010\005\012\001\001\000" +
    "\006\004\010\005\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\030\001\001\000\004\007\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\044\020\204\021\051\025\037\026\042\027" +
    "\047\001\001\000\002\001\001\000\016\012\044\020\041" +
    "\021\051\025\037\026\042\027\047\001\001\000\002\001" +
    "\001\000\004\010\201\001\001\000\014\012\044\021\051" +
    "\025\037\026\042\027\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\044\021\051\025\037\026\042\027\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\057\015\053\016\063\023\056\024\067\030\065\001" +
    "\001\000\002\001\001\000\004\022\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\137\001\001\000" +
    "\006\016\134\030\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\044\020\071\021\051\025\037\026\042\027\047\001" +
    "\001\000\014\012\044\021\051\025\037\026\042\027\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\044\020\075\021\051\025\037\026\042\027\047\001\001" +
    "\000\014\012\044\021\051\025\037\026\042\027\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\107\001\001\000\004\031\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\150\016\063\030\065\001\001" +
    "\000\012\014\147\015\053\016\063\030\065\001\001\000" +
    "\010\015\141\016\063\030\065\001\001\000\002\001\001" +
    "\000\006\016\145\030\065\001\001\000\006\016\144\030" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\057\015\053\016\063\023\155\030\065\001\001\000\014" +
    "\014\057\015\053\016\063\023\153\030\065\001\001\000" +
    "\002\001\001\000\004\022\125\001\001\000\002\001\001" +
    "\000\012\014\157\015\053\016\063\030\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\162\014\164" +
    "\015\053\016\063\030\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\057\015\053\016\063\023\056\024\167\030\065\001" +
    "\001\000\002\001\001\000\016\012\044\020\171\021\051" +
    "\025\037\026\042\027\047\001\001\000\014\012\044\021" +
    "\051\025\037\026\042\027\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\044\021\051\025\037\026\042\027\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 	private ArrayList<String> regla = new ArrayList<>();
	 private ArrayList<Simbolos> simbolo = new ArrayList<>();
	 
	 /*Entero 16 Bits*/
	private final int max_int = Short.MAX_VALUE;
	/*real 32 bits*/
	private final float max_float = Float.MAX_VALUE;
	/*constantes string no mayor a 30 caracteres*/
	 private final int max_string = 32; /* 32 YA QUE CUENTA LAS COMILLAS*/
	 private ArrayList<String> error = new ArrayList<>();
	 
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
       setError("Error en la linea: " + (s.left) + " columna: " + (s.right) + ". "
           + "valor " + s.value );
    }
    
	public void unrecovered_syntax_error(Symbol s) 
	throws java.lang.Exception{
			setError("Error NR en la linea: " + (s.left) + " columna: " + s.right + ". "
            + "valor " + s.value ); 
		}

	
	 
 private void setRegla(String r){
		regla.add(r);
	}
	
	public String getReglas(){
		String s ="";
		for(String l:regla) {
			s +=l + "\n";
		}
		return s;
	};
	
	private void setSimbolos(String l, String t, String ti){
		boolean flag;
		flag = true;
		if(simbolo.size()>0){
			for (Simbolos s:simbolo){
				switch  (t){
					case "ID" :
						if(s.getNombre().equals(l)){
							flag=false;
						}
						break;
					case "CONST_STRING":
						if(s.getNombre().equals(l.substring(1,l.length()-1))){
							flag=false;
						}
						break;
					default :
						if(s.getValor().equals(l)){
							flag=false;
						}
						break;
				}
			}
		}
		if (flag){
			simbolo.add(new Simbolos(l,t,ti));
		}
	}
	
	
	public ArrayList<Simbolos> getSimbolos(){
		return simbolo;
	};
	
	
	private void controlString(String s){
		if (s.length()> max_string ){
			setError(String.format("Tamanio de string superior a 30, tamanio actual: %d %n",(s.length()-2)));
		}	
	}
	
	private void controlReal(String s){
		float r = Float.parseFloat(s);
		if(r < 0 || r> max_float){
			setError(String.format("Valor real fuera de rango %d - %d , valor actual: %d %n",0,max_float,r));
		}
	}
	
	private void controlEntero(String s){
		int i =Integer.parseInt(s);
	 	if(i < 0 || i > max_int){
           setError(String.format("Valor Entero fuera de rango %d - %d, valor actual: %d %n",0,max_int, i));
        }
	}
	
	
	private void setError(String s ){
		error.add(s);
	}
	
	public ArrayList<String> getError(){
		return error;
	}
	
	private void declareID(String i){
		boolean flag=false;
		for (Simbolos s:simbolo){
			if(s.getToken()=="ID" && s.getNombre().equals(i)){
				flag=true;
			}
		}
		if(!flag){
			setError("ERROR ID no declarado " + i);
		}
	}
	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= program 
            {
              Object RESULT =null;
		 setRegla("pgm Regla 0 Compila correctamente llegando al simbolo start"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declare sentencias 
            {
              Object RESULT =null;
		 setRegla(" [Regla 1] declare programa"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declare ::= PR_DECLARE lista PR_ENDDECLARE 
            {
              Object RESULT =null;
		 setRegla("[Regla 2] seccion declare"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declare ::= error PR_ENDDECLARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista ::= listavariable 
            {
              Object RESULT =null;
		setRegla("[Regla 3] listavariable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista ::= listavariable lista 
            {
              Object RESULT =null;
		setRegla("[Regla 4] lista");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listavariable ::= CORCHA ID assigvar tipo CORCHC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; RESULT = ti; setRegla("[Regla 5] listavariable apertura " + i + " - " + ti); setSimbolos((String)i,"ID",(String) ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assigvar ::= COMA ID assigvar tipo COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; RESULT = ti; setRegla("[Regla 6] assigvar " + i +" - " + ti ); setSimbolos((String)i,"ID",(String) ti); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigvar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assigvar ::= CORCHC ASSIGN CORCHA 
            {
              Object RESULT =null;
		 setRegla("[Regla 6] assigvar fin ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigvar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 7] PR_INT"); RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 8] PR_FLOAT"); RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 9]  PR_STRING");RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= PR_PROGRAM sentencia PR_ENDPROGRAM 
            {
              Object RESULT =null;
		setRegla("[Regla 10] sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= error sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= error PR_ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia linea 
            {
              Object RESULT =null;
		setRegla("[Regla 11] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= error linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= linea 
            {
              Object RESULT =null;
		setRegla("[Regla 12] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // linea ::= asignacion 
            {
              Object RESULT =null;
		setRegla("[Regla 13] linea asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // linea ::= mostrar 
            {
              Object RESULT =null;
		setRegla("[Regla 14] linea mostrar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // linea ::= if 
            {
              Object RESULT =null;
		setRegla("[Regla 15] linea if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // linea ::= while 
            {
              Object RESULT =null;
		setRegla("[Regla 16] linea while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= ID ASSIGN valor PUNTOYCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		declareID((String) i); setRegla("[Regla 17] asignacion " + i); RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 18] valor CONST_STRING"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= expresion 
            {
              Object RESULT =null;
		setRegla("[Regla 19] valor expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mostrar ::= PR_WRITE constante PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 20] mostra constante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mostrar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mostrar ::= PR_WRITE ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 declareID((String) i); setRegla("[Regla 21] mostra ID"); RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mostrar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionlog ::= comp PR_AND comp 
            {
              Object RESULT =null;
		setRegla("[Regla 22] expresionlog PR_AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionlog ::= comp PR_OR comp 
            {
              Object RESULT =null;
		setRegla("[Regla 23] expresionlog PR_OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionlog ::= comp 
            {
              Object RESULT =null;
		setRegla("[Regla 24] comp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionlog ::= error PR_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionlog ::= error PR_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comp ::= expresion compara expresion 
            {
              Object RESULT =null;
		setRegla("[Regla 25] expresion compara expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp ::= expresion compara CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 26] expresion compara CONST_STRING"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp ::= CONST_STRING compara expresion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		setRegla("[Regla 27] CONST_STRING compara expresion"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp ::= error compara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // compara ::= MAYOR 
            {
              Object RESULT =null;
		setRegla("[Regla 28] MAYOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // compara ::= MENOR 
            {
              Object RESULT =null;
		setRegla("[Regla 29] MENOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // compara ::= IGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 30] IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // compara ::= DISTINTO 
            {
              Object RESULT =null;
		setRegla("[Regla 31] DISTINTO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compara ::= MENOROIGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 32] MENOROIGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compara ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 33] MAYOROIGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= PR_IF PARENA expresionlog PARENC sentencia PR_ENDIF PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 34] IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if ::= PR_IF PARENA expresionlog PARENC sentencia PR_ELSE sentencia PR_ENDIF PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 35] IF ELSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= PR_WHILE PARENA expresionlog PARENC sentencia PR_ENDWHILE PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 36] WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // promr ::= PR_PROMR PARENA ID PUNTOYCOMA MENOROIGUAL PUNTOYCOMA listaval PARENC 
            {
              Object RESULT =null;
		setRegla("[Regla 37] promr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("promr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // promr ::= error PARENC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("promr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaval ::= CORCHA CORCHC 
            {
              Object RESULT =null;
		setRegla("[Regla 38] listaval vacia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaval",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaval ::= CORCHA valores CORCHC 
            {
              Object RESULT =null;
		setRegla("[Regla 39] listaval"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaval",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valores ::= valores COMA CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 40] valores ,CONST_INT"); controlEntero((String) i); setSimbolos((String) i,"CONST_INT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valores ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valores ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 41] valores CONST_INT"); controlEntero((String)i); setSimbolos((String) i,"CONST_INT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 42] CONST_INT");  controlEntero((String)i); setSimbolos((String) i,"CONST_INT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constante ::= CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 43] CONST_STRING"); controlString((String )s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // constante ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 44] CONST_FLOAT"); controlReal((String) f); setSimbolos((String) f,"CONST_FLOAT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		setRegla("[Regla 45] E+T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		setRegla("[Regla 46] E-T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= termino 
            {
              Object RESULT =null;
		setRegla("[Regla 47] T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termino ::= termino MULTI factor 
            {
              Object RESULT =null;
		setRegla("[Regla 48] T*F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= termino DIVI factor 
            {
              Object RESULT =null;
		setRegla("[Regla 49] T/F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= factor 
            {
              Object RESULT =null;
		setRegla("[Regla 50] F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 51] CONST_INT es F" + i ); RESULT = i; controlEntero((String)i); setSimbolos((String) i,"CONST_INT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla( "[Regla 52] CONST_FLOAT es F"); controlReal((String) f);  setSimbolos((String) f,"CONST_FLOAT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 declareID((String) i); setRegla("[Regla 53] ID es F " + i); RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= PARENA factor PARENC 
            {
              Object RESULT =null;
		setRegla("[Regla 54] (F)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= promr 
            {
              Object RESULT =null;
		setRegla("[Regla 55]  promr es F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
