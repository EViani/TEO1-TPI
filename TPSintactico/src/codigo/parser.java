
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\003\005\000\002\003\004\000\002\005\003" +
    "\000\002\005\004\000\002\004\007\000\002\006\007\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\012\006\000\002\013\003\000\002" +
    "\013\003\000\002\021\005\000\002\021\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\003\000\002\024\004" +
    "\000\002\024\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\025\011\000\002\025\013" +
    "\000\002\026\011\000\002\030\012\000\002\030\004\000" +
    "\002\032\004\000\002\032\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\006\003\004\026\006\001\002\000\004\027" +
    "\034\001\002\000\004\002\033\001\002\000\004\015\010" +
    "\001\002\000\006\015\010\027\ufffc\001\002\000\004\004" +
    "\013\001\002\000\004\027\012\001\002\000\004\002\ufffe" +
    "\001\002\000\006\014\014\016\015\001\002\000\004\004" +
    "\026\001\002\000\004\005\024\001\002\000\010\044\020" +
    "\045\022\046\021\001\002\000\004\016\023\001\002\000" +
    "\006\014\ufff7\016\ufff7\001\002\000\006\014\ufff6\016\ufff6" +
    "\001\002\000\006\014\ufff5\016\ufff5\001\002\000\006\015" +
    "\ufffa\027\ufffa\001\002\000\004\015\025\001\002\000\010" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\006\014\014\016" +
    "\015\001\002\000\010\044\020\045\022\046\021\001\002" +
    "\000\004\014\031\001\002\000\010\044\ufff9\045\ufff9\046" +
    "\ufff9\001\002\000\004\027\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\006\005\010\001\001\000\006" +
    "\004\006\005\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\026\001\001\000\004\007\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	//lista donde se almacenaran las reglas por las que se paso
 	private ArrayList<String> regla = new ArrayList<>();
	//lista donde se almacenaran la tabla de simbolos
	private ArrayList<Simbolos> simbolo = new ArrayList<>();
	//lista para almacenar temporalmente los tipos, para so enlace con los IDs
	private  ArrayList<String> tipos = new ArrayList<String>();	 

	 /*Entero 16 Bits*/
	private final int max_int = Short.MAX_VALUE;
	/*real 32 bits*/
	private final float max_float = Float.MAX_VALUE;
	/*constantes string no mayor a 30 caracteres*/
	 private final int max_string = 32; /* 32 YA QUE CUENTA LAS COMILLAS*/
	//Lista donde se almacenaran los errors
	 private ArrayList<String> error = new ArrayList<>();
	//variable para conocer el ultimo simbolo enlazado con un tipo
	private int maxS =0;
	 
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
       setError("Error en la linea: " + (s.left) + " columna: " + (s.right) + ". "
           + "valor " + s.value );
    }
    
	public void unrecovered_syntax_error(Symbol s) 
	throws java.lang.Exception{
			setError("Error NR en la linea: " + (s.left) + " columna: " + s.right + ". "
            + "valor " + s.value ); 
		}

	
	 
 	private void setRegla(String r){
		regla.add(r);
	}
	
	public String getReglas(){
		String s ="";
		for(String l:regla) {
			s +=l + "\n";
		}
		return s;
	};
	
	private void setSimbolos(String l, String t, String ti){
		boolean flag;
		flag = true;
		if(simbolo.size()>0){
			for (Simbolos s:simbolo){
				switch  (t){
					case "ID" :
						if(s.getNombre().equals(l)){
							flag=false;
							setError(String.format("ID: %s ya declarado mas de una vez",  l));
						}
						break;
					case "CONST_STRING":
						if(s.getNombre().equals(l.substring(1,l.length()-1))){
							flag=false;
						}
						break;
					default :
						if(s.getValor().equals(l)){
							flag=false;
						}
						break;
				}
			}
		}
		if (flag){
			simbolo.add(new Simbolos(l,t,ti));
		}
	}
	
	
	public ArrayList<Simbolos> getSimbolos(){
		return simbolo;
	};
	
	
	private void controlString(String s){
		if (s.length()> max_string ){
			setError(String.format("Tamanio de string superior a 30, tamanio actual: %d %n",(s.length()-2)));
		}	
	}
	
	private void controlReal(String s){
		float r = Float.parseFloat(s);
		if(r < 0 || r> max_float){
			setError(String.format("Valor real fuera de rango %d - %d , valor actual: %d %n",0,max_float,r));
		}
	}
	
	private void controlEntero(String s){
		int i =Integer.parseInt(s);
	 	if(i < 0 || i > max_int){
           setError(String.format("Valor Entero fuera de rango %d - %d, valor actual: %d %n",0,max_int, i));
        }
	}
	
	
	private void setError(String s ){
		error.add(s);
	}
	
	public ArrayList<String> getError(){
		return error;
	}
	
	private void declareID(String i){
		boolean flag=false;
		for (Simbolos s:simbolo){
			if(s.getToken()=="ID" && s.getNombre().equals(i)){
				flag=true;
			}
		}
		if(!flag){
			setError("ERROR ID no declarado " + i);
		}
	}

	//Agregando tipo a una lista
	private void agregarTipo(String t){
		//se agrega un tipo a la lista de tipos
		tipos.add(t);	
	}	

	//se enlaza cada tipo a su ID
	private void tipoID(){
		//Los tipos son ingresados por orden de aparicion
		//por lo que se debera recorrer la lista de tipos de atras hacia adelante
		int t = tipos.size()-1;
		for (int i=maxS; i <simbolo.size();i++){
			simbolo.get(i).setTipo(tipos.get(t));
			t--;
		}
		//se almacena la posicion del ultimo simbolo enlazado
		maxS=simbolo.size();
		//se limpia la lista de tipos, para ahorrar recurso
		tipos.clear();
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declare EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= program 
            {
              Object RESULT =null;
		 setRegla("pgm Regla 0 Compila correctamente llegando al simbolo start"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declare sentencias 
            {
              Object RESULT =null;
		 setRegla(" [Regla 1] declare programa"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declare ::= PR_DECLARE lista PR_ENDDECLARE 
            {
              Object RESULT =null;
		 setRegla("[Regla 2] seccion declare"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declare ::= error PR_ENDDECLARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista ::= listavariable 
            {
              Object RESULT =null;
		setRegla("[Regla 3] listavariable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista ::= listavariable lista 
            {
              Object RESULT =null;
		setRegla("[Regla 4] lista");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listavariable ::= CORCHA ID assigvar tipo CORCHC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; RESULT = ti; setRegla("[Regla 5] listavariable apertura " + i + " - " + ti); setSimbolos((String)i,"ID",""); agregarTipo((String) ti); tipoID(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assigvar ::= COMA ID assigvar tipo COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; RESULT = ti; setRegla("[Regla 6] assigvar " + i +" - " + ti ); setSimbolos((String)i,"ID"," "); agregarTipo((String) ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigvar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assigvar ::= CORCHC ASSIGN CORCHA 
            {
              Object RESULT =null;
		 setRegla("[Regla 6] assigvar fin ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigvar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 7] PR_INT"); RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 8] PR_FLOAT"); RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 9]  PR_STRING");RESULT = ti;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= PR_PROGRAM sentencia PR_ENDPROGRAM 
            {
              Object RESULT =null;
		setRegla("[Regla 10] sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= error sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= error PR_ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia linea 
            {
              Object RESULT =null;
		setRegla("[Regla 11] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= error linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= linea 
            {
              Object RESULT =null;
		setRegla("[Regla 12] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // linea ::= asignacion 
            {
              Object RESULT =null;
		setRegla("[Regla 13] linea asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // linea ::= mostrar 
            {
              Object RESULT =null;
		setRegla("[Regla 14] linea mostrar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // linea ::= if 
            {
              Object RESULT =null;
		setRegla("[Regla 15] linea if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // linea ::= while 
            {
              Object RESULT =null;
		setRegla("[Regla 16] linea while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= ID ASSIGN valor PUNTOYCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		declareID((String) i); setRegla("[Regla 17] asignacion " + i); RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 18] valor CONST_STRING"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= expresion 
            {
              Object RESULT =null;
		setRegla("[Regla 19] valor expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mostrar ::= PR_WRITE constante PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 20] mostra constante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mostrar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mostrar ::= PR_WRITE ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 declareID((String) i); setRegla("[Regla 21] mostra ID"); RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mostrar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionlog ::= comp PR_AND comp 
            {
              Object RESULT =null;
		setRegla("[Regla 22] expresionlog PR_AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionlog ::= comp PR_OR comp 
            {
              Object RESULT =null;
		setRegla("[Regla 23] expresionlog PR_OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionlog ::= comp 
            {
              Object RESULT =null;
		setRegla("[Regla 24] comp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionlog ::= error PR_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionlog ::= error PR_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlog",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comp ::= expresion compara expresion 
            {
              Object RESULT =null;
		setRegla("[Regla 25] expresion compara expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp ::= expresion compara CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 26] expresion compara CONST_STRING"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp ::= CONST_STRING compara expresion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		setRegla("[Regla 27] CONST_STRING compara expresion"); controlString((String) s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp ::= error compara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // compara ::= MAYOR 
            {
              Object RESULT =null;
		setRegla("[Regla 28] MAYOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // compara ::= MENOR 
            {
              Object RESULT =null;
		setRegla("[Regla 29] MENOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // compara ::= IGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 30] IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // compara ::= DISTINTO 
            {
              Object RESULT =null;
		setRegla("[Regla 31] DISTINTO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compara ::= MENOROIGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 32] MENOROIGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compara ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		setRegla("[Regla 33] MAYOROIGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= PR_IF PARENA expresionlog PARENC sentencia PR_ENDIF PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 34] IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if ::= PR_IF PARENA expresionlog PARENC sentencia PR_ELSE sentencia PR_ENDIF PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 35] IF ELSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= PR_WHILE PARENA expresionlog PARENC sentencia PR_ENDWHILE PUNTOYCOMA 
            {
              Object RESULT =null;
		setRegla("[Regla 36] WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // promr ::= PR_PROMR PARENA ID PUNTOYCOMA MENOROIGUAL PUNTOYCOMA listaval PARENC 
            {
              Object RESULT =null;
		setRegla("[Regla 37] promr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("promr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // promr ::= error PARENC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("promr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaval ::= CORCHA CORCHC 
            {
              Object RESULT =null;
		setRegla("[Regla 38] listaval vacia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaval",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaval ::= CORCHA valores CORCHC 
            {
              Object RESULT =null;
		setRegla("[Regla 39] listaval"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaval",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valores ::= valores COMA CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 40] valores ,CONST_INT"); controlEntero((String) i); setSimbolos((String) i,"CONST_INT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valores ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valores ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 41] valores CONST_INT"); controlEntero((String)i); setSimbolos((String) i,"CONST_INT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 42] CONST_INT");  controlEntero((String)i); setSimbolos((String) i,"CONST_INT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // constante ::= CONST_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 43] CONST_STRING"); controlString((String )s); setSimbolos((String) s,"CONST_STRING",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // constante ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 44] CONST_FLOAT"); controlReal((String) f); setSimbolos((String) f,"CONST_FLOAT",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		setRegla("[Regla 45] E+T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		setRegla("[Regla 46] E-T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= termino 
            {
              Object RESULT =null;
		setRegla("[Regla 47] T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termino ::= termino MULTI factor 
            {
              Object RESULT =null;
		setRegla("[Regla 48] T*F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= termino DIVI factor 
            {
              Object RESULT =null;
		setRegla("[Regla 49] T/F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= factor 
            {
              Object RESULT =null;
		setRegla("[Regla 50] F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= CONST_INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla("[Regla 51] CONST_INT es F" + i ); RESULT = i; controlEntero((String)i); setSimbolos((String) i,"CONST_INT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		setRegla( "[Regla 52] CONST_FLOAT es F"); controlReal((String) f);  setSimbolos((String) f,"CONST_FLOAT","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 declareID((String) i); setRegla("[Regla 53] ID es F " + i); RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= PARENA expresion PARENC 
            {
              Object RESULT =null;
		setRegla("[Regla 54] (E)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= promr 
            {
              Object RESULT =null;
		setRegla("[Regla 55]  promr es F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
