/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.Symbol;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\23\1\26"+
    "\2\0\1\31\1\24\1\0\1\13\1\14\1\17\1\15\1\27\1\16"+
    "\1\10\1\20\12\7\1\5\1\30\1\22\1\6\1\21\1\0\1\31"+
    "\1\46\1\4\1\45\1\37\1\35\1\34\1\51\1\53\1\33\2\4"+
    "\1\40\1\52\1\36\1\47\1\50\1\4\1\43\1\41\1\44\2\4"+
    "\1\42\3\4\1\11\1\0\1\12\1\0\1\32\1\0\32\4\1\0"+
    "\1\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\2\1\1\21\1\22\7\3"+
    "\2\0\1\23\1\0\1\24\1\25\1\26\1\27\1\0"+
    "\1\30\1\31\11\3\1\32\1\0\1\33\10\3\2\0"+
    "\5\3\1\34\6\3\2\0\1\35\1\36\5\3\1\37"+
    "\1\40\1\3\1\41\1\42\1\0\4\3\1\43\1\3"+
    "\1\0\5\3\1\0\1\3\1\44\1\3\3\0\2\3"+
    "\3\0\2\3\24\0\1\45\1\46\4\0\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\54\0\334"+
    "\0\u0108\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\54\0\u01e4\0\u0210\0\54"+
    "\0\54\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344"+
    "\0\u0370\0\u039c\0\u0108\0\u03c8\0\54\0\54\0\54\0\54"+
    "\0\u0210\0\54\0\204\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\54\0\u0580\0\204\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\204\0\u0840"+
    "\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\204"+
    "\0\204\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\204\0\204"+
    "\0\u0a7c\0\204\0\54\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\204\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\204\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0"+
    "\0\u120c\0\u1238\0\54\0\54\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\2\1\32\1\33\1\34\1\5\1\35\1\5"+
    "\1\36\1\37\5\5\1\40\3\5\57\0\1\3\54\0"+
    "\1\5\2\0\1\5\22\0\1\41\21\5\5\0\1\42"+
    "\55\0\1\10\1\43\52\0\1\43\64\0\1\44\41\0"+
    "\1\45\53\0\1\46\53\0\1\47\72\0\1\50\27\0"+
    "\1\51\2\0\2\51\1\0\1\51\5\0\2\51\7\0"+
    "\1\52\2\0\23\51\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\1\5\1\53\1\5\1\54\15\5\4\0\1\5"+
    "\2\0\1\5\22\0\1\41\5\5\1\55\13\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\3\5\1\56\1\5"+
    "\1\57\13\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\2\5\1\60\16\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\11\5\1\61\7\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\10\5\1\62\7\5\1\63\4\0\1\5"+
    "\2\0\1\5\22\0\1\41\10\5\1\64\10\5\4\0"+
    "\1\5\2\0\1\5\23\0\21\5\6\0\1\65\64\0"+
    "\1\66\40\0\1\5\2\0\1\5\22\0\1\41\11\5"+
    "\1\67\7\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\14\5\1\70\4\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\4\5\1\71\14\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\6\5\1\72\12\5\4\0\1\5\2\0"+
    "\1\5\22\0\1\41\12\5\1\73\6\5\4\0\1\5"+
    "\2\0\1\5\22\0\1\41\10\5\1\74\10\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\1\75\20\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\1\76\20\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\14\5\1\77\4\5"+
    "\1\0\5\66\1\0\1\66\5\0\2\66\1\100\1\101"+
    "\10\0\23\66\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\13\5\1\102\5\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\1\103\3\5\1\104\2\5\1\105\5\5\1\106"+
    "\3\5\4\0\1\5\2\0\1\5\22\0\1\41\2\5"+
    "\1\107\16\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\5\5\1\110\13\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\1\111\20\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\11\5\1\112\7\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\5\5\1\113\13\5\4\0\1\5\2\0"+
    "\1\5\22\0\1\41\16\5\1\114\1\115\1\5\20\0"+
    "\1\116\53\0\1\117\37\0\1\5\2\0\1\5\22\0"+
    "\1\41\11\5\1\120\7\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\1\5\1\121\17\5\4\0\1\5\2\0"+
    "\1\5\22\0\1\41\2\5\1\122\16\5\4\0\1\5"+
    "\2\0\1\5\22\0\1\41\20\5\1\123\4\0\1\5"+
    "\2\0\1\5\22\0\1\41\10\5\1\124\10\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\13\5\1\125\5\5"+
    "\4\0\1\5\2\0\1\5\22\0\1\41\3\5\1\126"+
    "\15\5\4\0\1\5\2\0\1\5\22\0\1\41\2\5"+
    "\1\127\16\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\2\5\1\130\16\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\10\5\1\131\10\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\10\5\1\132\10\5\20\0\1\133\52\0"+
    "\1\134\40\0\1\5\2\0\1\5\22\0\1\41\12\5"+
    "\1\135\6\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\1\136\20\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\14\5\1\137\4\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\10\5\1\140\10\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\16\5\1\141\2\5\4\0\1\5\2\0"+
    "\1\5\22\0\1\41\13\5\1\142\5\5\1\0\5\134"+
    "\1\0\1\134\5\0\2\134\1\143\11\0\23\134\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\5\5\1\144\13\5"+
    "\4\0\1\5\2\0\1\5\22\0\1\41\5\5\1\145"+
    "\13\5\4\0\1\5\2\0\1\5\22\0\1\41\16\5"+
    "\1\146\2\5\4\0\1\5\2\0\1\5\22\0\1\41"+
    "\2\5\1\147\16\5\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\17\5\1\150\1\5\20\0\1\151\37\0\1\5"+
    "\2\0\1\5\22\0\1\41\13\5\1\152\5\5\4\0"+
    "\1\5\2\0\1\5\22\0\1\41\2\5\1\153\16\5"+
    "\4\0\1\5\2\0\1\5\22\0\1\41\10\5\1\154"+
    "\10\5\4\0\1\5\2\0\1\5\1\155\21\0\1\41"+
    "\21\5\4\0\1\5\2\0\1\5\1\156\21\0\1\41"+
    "\21\5\20\0\1\157\37\0\1\5\2\0\1\5\22\0"+
    "\1\41\10\5\1\160\10\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\13\5\1\161\5\5\41\0\1\162\53\0"+
    "\1\163\13\0\5\164\1\0\1\164\5\0\2\164\1\100"+
    "\1\101\10\0\23\164\4\0\1\5\2\0\1\5\22\0"+
    "\1\41\2\5\1\165\16\5\4\0\1\5\2\0\1\5"+
    "\22\0\1\41\17\5\1\166\1\5\35\0\1\167\53\0"+
    "\1\170\17\0\5\164\1\0\1\164\5\0\2\164\1\100"+
    "\11\0\23\164\4\0\1\5\2\0\1\5\1\171\21\0"+
    "\1\41\21\5\4\0\1\5\2\0\1\5\1\172\21\0"+
    "\1\41\21\5\45\0\1\173\53\0\1\174\47\0\1\175"+
    "\53\0\1\176\56\0\1\177\53\0\1\200\44\0\1\201"+
    "\53\0\1\202\51\0\1\203\53\0\1\204\65\0\1\205"+
    "\53\0\1\206\55\0\1\207\53\0\1\210\50\0\1\211"+
    "\53\0\1\212\45\0\1\213\53\0\1\214\50\0\1\215"+
    "\53\0\1\216\67\0\1\217\53\0\1\220\42\0\1\221"+
    "\53\0\1\222\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4884];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\2\1\7\11\4\1\1\11"+
    "\2\1\2\11\7\1\2\0\1\1\1\0\4\11\1\0"+
    "\1\11\12\1\1\11\1\0\11\1\2\0\14\1\2\0"+
    "\13\1\1\11\1\0\6\1\1\0\5\1\1\0\3\1"+
    "\3\0\2\1\3\0\2\1\24\0\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/*Entero 16 Bits*/
	private final int max_int = Short.MAX_VALUE;
	/*real 32 bits*/
	private final float max_float = Float.MAX_VALUE;
	/*constantes string no mayor a 30 caracteres*/
	 private final int max_string = 32; /* 32 YA QUE CUENTA LAS COMILLAS*/
    private ArrayList<Lexema> Lexemas = new ArrayList<>();
    
	
	private boolean controlString(String s){
		if (s.length()> max_string ){
			System.out.printf("Tamanio de string superior a 30, tamanio actual: %d %n En linea %d %n",(s.length()-2),yyline+1);
            throw new NumberFormatException();
		}	
		return true;
	}
	
	private boolean controlReal(String s){
		float r = Float.parseFloat(s);
		if(r < 0 || r> max_float){
			 System.out.printf("Valor real fuera de rango %d - %d , valor actual: %d %n En linea %d %n",0,max_float,r,yyline+1);
            throw new NumberFormatException();
		}
		return true;
	}
	
	private boolean controlEntero(String s){
		int i =Integer.parseInt(s);
	 	if(i < 0 || i > max_int){
            System.out.printf("Valor Entero fuera de rango %d - %d, valor actual: %d %n En linea %d %n",0,max_int, i,yyline+1);
            throw new NumberFormatException();
        }
        return true;
	}
	
	public String getLexemas(){String s ="";
		for(Lexema l:Lexemas) {
			s +=String.format("Token %s, encontrado Lexema %s %n",l.getToken(),l.getLexema());
		}
		return s;
	};



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return null;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            } 
            // fall through
          case 41: break;
          case 2: 
            { 
            } 
            // fall through
          case 42: break;
          case 3: 
            { Lexemas.add(new Lexema(yytext(),"VARIABLE"));
            } 
            // fall through
          case 43: break;
          case 4: 
            { Lexemas.add(new Lexema(yytext(),"IGUAL"));
            } 
            // fall through
          case 44: break;
          case 5: 
            { controlEntero(yytext());
				Lexemas.add(new Lexema(yytext(),"CONST_INT"));
            } 
            // fall through
          case 45: break;
          case 6: 
            { Lexemas.add(new Lexema(yytext(),"CORCHA"));
            } 
            // fall through
          case 46: break;
          case 7: 
            { Lexemas.add(new Lexema(yytext(),"CORCHC"));
            } 
            // fall through
          case 47: break;
          case 8: 
            { Lexemas.add(new Lexema(yytext(),"PARENA"));
            } 
            // fall through
          case 48: break;
          case 9: 
            { Lexemas.add(new Lexema(yytext(),"PARENC"));
            } 
            // fall through
          case 49: break;
          case 10: 
            { Lexemas.add(new Lexema(yytext(),"SUMA"));
            } 
            // fall through
          case 50: break;
          case 11: 
            { Lexemas.add(new Lexema(yytext(),"RESTA"));
            } 
            // fall through
          case 51: break;
          case 12: 
            { Lexemas.add(new Lexema(yytext(),"MULTIPLICAION"));
            } 
            // fall through
          case 52: break;
          case 13: 
            { Lexemas.add(new Lexema(yytext(),"DIVISION"));
            } 
            // fall through
          case 53: break;
          case 14: 
            { Lexemas.add(new Lexema(yytext(),"MAYOR"));
            } 
            // fall through
          case 54: break;
          case 15: 
            { Lexemas.add(new Lexema(yytext(),"MENOR"));
            } 
            // fall through
          case 55: break;
          case 16: 
            { Lexemas.add(new Lexema(yytext(),"PR_AND"));
            } 
            // fall through
          case 56: break;
          case 17: 
            { Lexemas.add(new Lexema(yytext(),"COMA"));
            } 
            // fall through
          case 57: break;
          case 18: 
            { Lexemas.add(new Lexema(yytext(),"PUNTOYCOMA"));
            } 
            // fall through
          case 58: break;
          case 19: 
            { controlReal(yytext()); 
Lexemas.add(new Lexema(yytext(),"CONST_FLOAT"));
            } 
            // fall through
          case 59: break;
          case 20: 
            { Lexemas.add(new Lexema(yytext(),"MAYOROIGUAL"));
            } 
            // fall through
          case 60: break;
          case 21: 
            { Lexemas.add(new Lexema(yytext(),"MENOROIGUAL"));
            } 
            // fall through
          case 61: break;
          case 22: 
            { Lexemas.add(new Lexema(yytext(),"DISTINTO"));
            } 
            // fall through
          case 62: break;
          case 23: 
            { Lexemas.add(new Lexema(yytext(),"PR_OR"));
            } 
            // fall through
          case 63: break;
          case 24: 
            { controlString(yytext()); 
				Lexemas.add(new Lexema(yytext(),"CONST_STRING"));
            } 
            // fall through
          case 64: break;
          case 25: 
            { Lexemas.add(new Lexema(yytext(),"PR_IF"));
            } 
            // fall through
          case 65: break;
          case 26: 
            { Lexemas.add(new Lexema(yytext(),"ASSIGN"));
            } 
            // fall through
          case 66: break;
          case 27: 
            { Lexemas.add(new Lexema(yytext(),"PR_INT"));
            } 
            // fall through
          case 67: break;
          case 28: 
            { Lexemas.add(new Lexema(yytext(),"PR_ELSE"));
            } 
            // fall through
          case 68: break;
          case 29: 
            { Lexemas.add(new Lexema(yytext(),"PR_FLOAT"));
            } 
            // fall through
          case 69: break;
          case 30: 
            { Lexemas.add(new Lexema(yytext(),"PR_ENDIF"));
            } 
            // fall through
          case 70: break;
          case 31: 
            { Lexemas.add(new Lexema(yytext(),"PR_WRITE"));
            } 
            // fall through
          case 71: break;
          case 32: 
            { Lexemas.add(new Lexema(yytext(),"PR_WHILE"));
            } 
            // fall through
          case 72: break;
          case 33: 
            { Lexemas.add(new Lexema(yytext(),"PR_PROMR"));
            } 
            // fall through
          case 73: break;
          case 34: 
            { Lexemas.add(new Lexema(yytext(),"COMEN"));
            } 
            // fall through
          case 74: break;
          case 35: 
            { Lexemas.add(new Lexema(yytext(),"PR_STRING"));
            } 
            // fall through
          case 75: break;
          case 36: 
            { Lexemas.add(new Lexema(yytext(),"PR_ENDWHILE"));
            } 
            // fall through
          case 76: break;
          case 37: 
            { Lexemas.add(new Lexema(yytext(),"PR_DECLARE"));
            } 
            // fall through
          case 77: break;
          case 38: 
            { Lexemas.add(new Lexema(yytext(),"PR_PROGRAM"));
            } 
            // fall through
          case 78: break;
          case 39: 
            { Lexemas.add(new Lexema(yytext(),"PR_ENDDECLARE"));
            } 
            // fall through
          case 79: break;
          case 40: 
            { Lexemas.add(new Lexema(yytext(),"PR_ENDPROGRAM"));
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
